# -*- coding: utf-8 -*-
"""Simulator_steel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AlDJnDVeD3M2yYEDTP6VVP2ouoaq7F_U

## Steel and Cement Emission Simulator
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

"""# Parameters"""

steel_production_increase_2035 = 1.3
steel_production_increase_2050 = 1.4

energy_efficiency_2035 = 0.2
energy_efficiency_2050 = 0.3

steel_CC_share_2035 = .14
steel_CC_share_2050 = .16

steel_EAF_share_2035 = .15
steel_EAF_share_2050 = .18

def calculate_emissions(steel_production_increase_2035,steel_production_increase_2050,energy_efficiency_2035,energy_efficiency_2050,steel_CC_share_2035,steel_CC_share_2050,steel_EAF_share_2035,steel_EAF_share_2050):
    """# Steel production by Route"""
    
    production_steel = pd.read_csv('steel_production.csv',sep = ';')
    production_steel = production_steel.drop(columns = production_steel.iloc[:,5:])
    production_steel = production_steel.set_index('Year')
    print(production_steel)
    
    """# Energy Consumption 2005 - 2019 in GJ"""
    
    energy_consumption_ktep = pd.read_csv('energy_consumption.csv', sep = ';')
    energy_consumption_ktep = energy_consumption_ktep.drop(columns =['Cement'])
    converstion_ktep_to_gj = 0.04185
    energy_consumption_ktep = energy_consumption_ktep.set_index('Year')
    energy_consumption = energy_consumption_ktep*converstion_ktep_to_gj
    print(energy_consumption)
    
    """# Emission 2005 -2019"""
    
    emission_2005_2019 = pd.read_csv('emissions_2005_2019.csv',sep = ';')
    emission_2005_2019 = emission_2005_2019.drop(columns = ['Cement (Energy)','Cement (process)'])
    emission_2005_2019 = emission_2005_2019.drop(columns= emission_2005_2019.iloc[:,4:])
    emission_2005_2019 = emission_2005_2019.drop(index = emission_2005_2019.index[15:])
    emission_2005_2019 = emission_2005_2019.set_index('Year')
    print(emission_2005_2019)
    
    """# Energy Intensity
    
    ### Iron and steel Energy Intensity
    """
    
    steel_energy_intensity = energy_consumption['Steel']/production_steel['Production']
    print (steel_energy_intensity)
    
    """# Emission intensity
    
    ### Steel: Emission intensity
    """
    
    steel_MC_EI = emission_2005_2019['Steel (MC)']/(production_steel['Production']*production_steel['Share BOF MC'])
    steel_CC_EI = emission_2005_2019['Steel (CC)']/(production_steel['Production']*production_steel['Share BOF CC'])
    steel_EOF_EI = emission_2005_2019['Steel EOF']/(production_steel['Production']*production_steel['Share EOF'])
    
    steel_EI = pd.concat([steel_MC_EI,steel_CC_EI,steel_EOF_EI],axis = 1)
    steel_EI.columns = ['Steel (MC)','Steel (CC)','Steel EOF']
    
    print(steel_EI)
    
    """# New level of production
    
    ### Steel level of production
    """
    
    steel_production_2035 = steel_production_increase_2035*production_steel['Production'][2019]
    steel_production_2050 = steel_production_increase_2050*production_steel['Production'][2019]
    
    
    
    steel_MC_share_2035 = 1-steel_CC_share_2035-steel_EAF_share_2035
    steel_MC_share_2050 = 1-steel_CC_share_2050-steel_EAF_share_2050
    
    print(steel_production_2035,steel_production_2050)
    
    for i in np.linspace(2020,2050,31):
      production_steel.loc[i] = np.nan
    
    production_steel.loc[2035] = [steel_production_2035,steel_MC_share_2035,steel_CC_share_2035,steel_EAF_share_2035]
    production_steel.loc[2050] = [steel_production_2050,steel_MC_share_2050,steel_CC_share_2050,steel_EAF_share_2050]
    
    production_ratio_2035 = (production_steel.loc[2035]['Production']/production_steel.loc[2019]['Production'])**(1/16)
    production_ratio_2050 = (production_steel.loc[2050]['Production']/production_steel.loc[2035]['Production'])**(1/15)
    
    for i in np.linspace(2020,2034,15):
      production_steel.loc[i]['Production']= production_steel.loc[i-1]['Production']*production_ratio_2035 
    for i in np.linspace(2036,2049,14):
      production_steel.loc[i]['Production'] = production_steel.loc[i-1]['Production']*production_ratio_2050
    
    production_steel = production_steel.interpolate()
    
    print(production_steel)
    
    """# Emissions 2020-2050"""
    
    for i in np.linspace(2020,2050,31):
        steel_EI .loc[i] = np.nan
    
    steel_EI.loc[2035] = steel_EI.loc[2019]*(1-energy_efficiency_2035)
    steel_EI.loc[2050] = steel_EI.loc[2019]*(1-energy_efficiency_2050)
    
    EI_reduction_ratio_2035 = (steel_EI.loc[2035]['Steel (MC)']/steel_EI.loc[2019]['Steel (MC)'])**(1/16)
    EI_reduction_ratio_2050 = (steel_EI.loc[2050]['Steel (MC)']/steel_EI.loc[2035]['Steel (MC)'])**(1/15)
    
    for i in np.linspace(2020,2034,15):
      steel_EI.loc[i] = steel_EI.loc[i-1]*EI_reduction_ratio_2035 
    for i in np.linspace(2036,2049,14):
      steel_EI.loc[i] = steel_EI.loc[i-1]*EI_reduction_ratio_2050
      
    emission_2005_2050 =( production_steel['Production']*production_steel['Share BOF MC']*steel_EI['Steel (MC)']
    +production_steel['Production']*production_steel['Share BOF CC']*steel_EI['Steel (CC)']
    +production_steel['Production']*production_steel['Share EOF']*steel_EI['Steel EOF']
    )
    
    return (emission_2005_2050)

emissions_BAU = calculate_emissions(1.5,2.,0,0,.1,.1,.14,.14)
emissions_reductions = calculate_emissions(steel_production_increase_2035,steel_production_increase_2050,energy_efficiency_2035,energy_efficiency_2050,steel_CC_share_2035,steel_CC_share_2050,steel_EAF_share_2035,steel_EAF_share_2050)


plt.plot(emissions_reductions)
plt.plot(emissions_BAU)
plt.annotate("{:.2f}".format(emissions_BAU[2050]),(2050,emissions_BAU[2050]))
plt.annotate("{:.2f}".format(emissions_reductions[2050]),(2050,emissions_reductions[2050]))
plt.annotate("{:.2f}".format(emissions_reductions[2019]),(2019,emissions_reductions[2019]))